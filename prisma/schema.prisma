// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id         Int     @id @default(autoincrement())
  address    String  @unique
  symbol     String  @default("n/a")
  name       String  @default("n/a")
  decimals   Int     @default(-1)
  malformed  Boolean @default(false)
  noContract Boolean @default(false)
  pairs0     Pair[]  @relation("Pair_Token0")
  pairs1     Pair[]  @relation("Pair_Token1")
  listed     Boolean @default(false)
}

model Pair {
  id                          Int                               @id @default(autoincrement())
  address                     String                            @unique
  token0                      Token                             @relation("Pair_Token0", fields: [t0], references: [id])
  t0                          Int
  token1                      Token                             @relation("Pair_Token1", fields: [t1], references: [id])
  t1                          Int
  liquidityInfo               PairLiquidityInfo?                @relation("Pair_Info")
  synchronized                Boolean
  liquidityInfoHistory        PairLiquidityInfoHistory[]
  liquidityInfoHistoryV2      PairLiquidityInfoHistoryV2[]
  liquidityInfoHistoryError   PairLiquidityInfoHistoryError[]
  liquidityInfoHistoryV2Error PairLiquidityInfoHistoryV2Error[]
}

model PairLiquidityInfo {
  id          Int    @id
  pair        Pair   @relation("Pair_Info", fields: [id], references: [id])
  totalSupply String
  reserve0    String
  reserve1    String
  height      Int
}

model PairLiquidityInfoHistory {
  id             Int      @id @default(autoincrement())
  pair           Pair     @relation(fields: [pairId], references: [id])
  pairId         Int
  totalSupply    String
  reserve0       String
  reserve1       String
  height         Int
  microBlockHash String
  microBlockTime BigInt
  updatedAt      DateTime @default(now()) @updatedAt

  @@unique(name: "pairIdMicroBlockHashUniqueIndex", [pairId, microBlockHash])
}

model PairLiquidityInfoHistoryError {
  id             Int      @id @default(autoincrement())
  pair           Pair     @relation(fields: [pairId], references: [id])
  pairId         Int
  microBlockHash String
  error          String
  timesOccurred  Int      @default(1)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  @@unique(name: "pairIdMicroBlockHashErrorUniqueIndex", [pairId, microBlockHash, error])
}

model PairLiquidityInfoHistoryV2 {
  id              Int      @id @default(autoincrement())
  pair            Pair     @relation(fields: [pairId], references: [id])
  pairId          Int
  eventType       String
  height          Int
  microBlockTime  BigInt
  logIndex        Int
  microBlockHash  String
  transactionHash String
  totalSupply     String?
  reserve0        String?
  reserve1        String?
  deltaReserve0   String?
  deltaReserve1   String?
  fiatPrice       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

  @@unique(name: "pairIdMicroBlockHashLogIndexUniqueIndex", [pairId, microBlockHash, logIndex])
}

model PairLiquidityInfoHistoryV2Error {
  id             Int      @id @default(autoincrement())
  pair           Pair     @relation(fields: [pairId], references: [id])
  pairId         Int
  microBlockHash String
  logIndex       Int
  error          String
  timesOccurred  Int      @default(1)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  @@unique(name: "pairIdMicroBlockHashLogIndexUniqueIndex", [pairId, microBlockHash, logIndex, error])
}
